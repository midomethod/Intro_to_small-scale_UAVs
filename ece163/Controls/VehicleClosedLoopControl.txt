import math
import sys
import pickle
import enum
import ece163.Containers.Inputs as Inputs
import ece163.Containers.States as States
import ece163.Containers.Controls as Controls
import ece163.Constants.VehiclePhysicalConstants as VPC
import ece163.Modeling.VehicleAerodynamicsModel as VehicleAerodynamicsModule

class PDControl():
    def __init__(self, kp=0.0, kd=0.0, trim=0.0, lowLimit=0.0, highLimit=0.0):
        self.kp = kp
        self.kd = kd
        self.trim = trim
        self.lowLimit = lowLimit
        self.highLimit = highLimit
        return
    
    def Update(self,command=0.0, current=0.0, derivative=0.0):
        err = command-current
        Up = self.kp*err
        Ud = self.kd*(-derivative)
        U=Up+Ud+self.trim
        
        if U>=self.lowLimit and U<=self.highLimit:
            return U
        elif U>self.highLimit:
            return self.highLimit
        else:
            return self.lowLimit

    def setPDGains(self, kp=0.0, kd=0.0, trim=0.0, lowLimit=0.0, highLimit=0.0):
        self.kp=kp
        self.kd=kd
        self.trim=trim
        self.lowLimit=lowLimit
        self.highLimit=highLimit
        return
    
class PIControl():
    def __init__(self, dT=VPC.dT, kp=0.0, ki=0.0, trim=0.0, lowLimit=0.0, highLimit=0.0):
        self.dT=dT
        self.kp=kp
        self.ki=ki
        self.trim=trim
        self.lowLimit=lowLimit
        self.highLimit=highLimit
        self.prevError=0
        self.accumulator = 0
        return

    def Update(self, command=0.0, current=0.0):
        err = command-current

        self.accumulator += 0.5*self.dT*(err+self.prevError)
        Up = self.kp*err
        Ui = self.ki*self.accumulator
        U = Up+Ui+self.trim

        if U>=self.lowLimit and U<=self.highLimit:
            self.prevError = err
            return U
        else:
            self.accumulator -= 0.5*self.dT*(err+self.prevError)
            self.prevError = err
            
            if U>self.highLimit:
                return self.highLimit
            else:
                return self.lowLimit

    def resetIntegrator(self):
        self.accumulator = 0
        self.prevError = 0
        return

    def setPIGains(self, dT=VPC.dT, kp=0.0, ki=0.0, trim=0.0, lowLimit=0.0, highLimit=0.0):
        self.dT=dT
        self.kp=kp
        self.ki=ki
        self.trim=trim
        self.lowLimit=lowLimit
        self.highLimit=highLimit
        return

class PIDControl():
    def __init__(self, dT=VPC.dT, kp=0.0, kd=0.0, ki=0.0, trim=0.0, lowLimit=0.0, highLimit=0.0):
        self.dT=dT
        self.kp=kp
        self.ki=ki
        self.kd=kd
        self.trim=trim
        self.lowLimit=lowLimit
        self.highLimit=highLimit
        self.prevError = 0
        self.accumulator = 0
        return

    def __repr__(self):
        return "PIDControl(dT={},kp={},kd={},ki={},trim={},lowLimit={},highLimit={})".format(self.dT,self.kp,self.kd,self.ki,self.trim,self.lowLimit,self.highLimit)

    def Update(self, command=0.0, current=0.0, derivative=0.0):
        err = command-current

        self.accumulator += 0.5*self.dT*(err+self.prevError)
        Up = self.kp*err
        Ui = self.ki*self.accumulator
        Ud = self.kd*(-derivative)
        U = Up+Ui+Ud+self.trim

        if U>=self.lowLimit and U<=self.highLimit:
            self.prevError = err
            return U
        else:
            self.accumulator -= 0.5*self.dT*(err+self.prevError)
            self.prevError = err
            
            if U>self.highLimit:
                return self.highLimit
            else:
                return self.lowLimit
        return
    
    def resetIntegrator(self):
        self.accumulator = 0
        self.prevError = 0
        return

    def setPIDGains(self, dT=VPC.dT, kp=0.0, kd=0.0, ki=0.0, trim=0.0, lowLimit=0.0, highLimit=0.0): 
        self.dT=dT
        self.kp=kp
        self.ki=ki
        self.kd=kd
        self.trim=trim
        self.lowLimit=lowLimit
        self.highLimit=highLimit
        return

class VehicleClosedLoopControl():
    def __init__(self, dT=0.01):
        self.dT=dT
        self.VAM = VehicleAerodynamicsModule.VehicleAerodynamicsModel()
        self.CG = Controls.controlGains()
        self.TI = Inputs.controlInputs()
        self.CS = Inputs.controlInputs()
        self.aileronFromPhi = PIDControl()
        self.rudderFromBeta = PIControl()
        self.PhiFromChi = PIControl()
        self.elevatorFromTheta = PDControl()
        self.ThetaFromH = PIControl()
        self.ThetaFromVa = PIControl()
        self.ThrottleFromVa = PIControl()
        self.climbMode = Controls.AltitudeStates.HOLDING
        return

    def Update(self,referenceCommands=Controls.referenceCommands()):
        # Adjust the internal course by ±2π if deltaChi is too large
        deltaCHI = referenceCommands.commandedCourse-self.VAM.vehicleDynamics.state.chi
        if deltaCHI > math.pi:
            self.VAM.vehicleDynamics.state.chi += 2*math.pi
        elif deltaCHI < math.pi:
            self.VAM.vehicleDynamics.state.chi -= 2*math.pi

        # Get roll command from course
        Roll_c = self.PhiFromChi.Update(referenceCommands.commandedCourse,self.VAM.vehicleDynamics.state.chi)

        # Get aileron command from roll
        Aileron_c = self.aileronFromPhi.Update(referenceCommands.commandedRoll,self.VAM.vehicleDynamics.state.roll)

        # Get rudder command from sideslip
        Rudder_c = self.rudderFromBeta.Update(0,self.VAM.vehicleDynamics.state.beta)

        # Determine the altitude hold status {CLIMBING, DESCENDING, HOLDING}
        altitude_current = -self.VAM.vehicleDynamics.state.pd

        climbModePrev = self.climbMode

        if altitude_current > referenceCommands.commandedAltitude+VPC.altitudeHoldZone:
            self.climbMode = Controls.AltitudeStates.DESCENDING
        elif altitude_current < referenceCommands.commandedAltitude-VPC.altitudeHoldZone:
            self.climbMode = Controls.AltitudeStates.CLIMBING
        else:
            self.climbMode = Controls.AltitudeStates.HOLDING

        if climbModePrev != self.climbMode:
            if self.climbMode is Controls.AltitudeStates.CLIMBING:
                self.ThetaFromH.resetIntegrator()
            else:
                self.ThetaFromVa.resetIntegrator()

        # If CLIMBING, pitch = theta from Va & Throttle = 1
        if self.climbMode is Controls.AltitudeStates.CLIMBING:
            Throttle_c = VPC.maxControls.Throttle
            Pitch_c = self.ThetaFromVa.Update(referenceCommands.commandedAirspeed, self.VAM.vehicleDynamics.state.Va)
        # If DESCENDING, pitch = theta from Va & Throttle = 0
        elif self.climbMode is Controls.AltitudeStates.DESCENDING:
            Throttle_c = VPC.minControls.Throttle
            Pitch_c = self.ThetaFromVa.Update(referenceCommands.commandedAirspeed, self.VAM.vehicleDynamics.state.Va)
        # If HOLDING, pitch = theta from H & Throttle = throttleFromVa + throttle*
        else:
            Throttle_c = self.ThrottleFromVa.Update(referenceCommands.commandedAirspeed,self.VAM.vehicleDynamics.state.Va)
            Pitch_c = self.ThetaFromH.Update(referenceCommands.commandedAltitude, altitude_current)

        # Get elevator from ThetaPD
        Elevator_c = self.elevatorFromTheta.Update(referenceCommands.commandedPitch,self.VAM.vehicleDynamics.state.pitch)

        # Set control surfaces
        self.CS.Throttle=Throttle_c
        self.CS.Elevator=Elevator_c
        self.CS.Rudder=Rudder_c
        self.CS.Aileron=Aileron_c

        # Alter the reference commands
        referenceCommands.commandedPitch = Pitch_c
        referenceCommands.commandedRoll = Roll_c

        self.VAM.Update(self.CS)
        return
    
    def getControlGains(self):
        return self.CG
    
    def getVehicleAerodynamicsModel(self):
        return self.VAM

    # What to do...
    def getVehicleControlSurfaces(self):
        return self.CS

    def getVehicleState(self):
        return self.VAM.vehicleDynamics.state

    def reset(self):
        self.VAM.vehicleDynamics.reset()
        self.aileronFromPhi.resetIntegrator()
        self.rudderFromBeta.resetIntegrator()
        self.PhiFromChi.resetIntegrator()
        self.ThetaFromH.resetIntegrator()
        self.ThetaFromVa.resetIntegrator()
        self.ThrottleFromVa.resetIntegrator()
        return
    
    def setControlGains(self, CG):
        self.CG = CG
        self.aileronFromPhi.setPIDGains(self.VAM.vehicleDynamics.dT, self.CG.kp_roll, self.CG.kd_roll,self.CG.ki_roll,self.TI.Aileron,VPC.minControls.Aileron,VPC.maxControls.Aileron)
        self.PhiFromChi.setPIGains(self.VAM.vehicleDynamics.dT,self.CG.kp_course,self.CG.ki_course,0.0,-math.radians(VPC.bankAngleLimit),math.radians(VPC.bankAngleLimit))
        self.rudderFromBeta.setPIGains(self.VAM.vehicleDynamics.dT,self.CG.kp_sideslip,self.CG.ki_sideslip,self.TI.Rudder,VPC.minControls.Rudder,VPC.maxControls.Rudder)
        self.elevatorFromTheta.setPDGains(self.CG.kp_pitch,self.CG.kd_pitch,self.TI.Elevator,VPC.minControls.Elevator,VPC.maxControls.Elevator)
        self.ThrottleFromVa.setPIGains(self.VAM.vehicleDynamics.dT,self.CG.kp_SpeedfromThrottle,self.CG.ki_SpeedfromThrottle,self.TI.Throttle,VPC.minControls.Throttle,VPC.maxControls.Throttle)
        self.ThetaFromH.setPIGains(self.VAM.vehicleDynamics.dT,self.CG.kp_altitude,self.CG.ki_altitude,0.0,-math.radians(VPC.pitchAngleLimit),math.radians(VPC.pitchAngleLimit))
        self.ThetaFromVa.setPIGains(self.VAM.vehicleDynamics.dT,self.CG.kp_SpeedfromElevator,self.CG.ki_SpeedfromElevator,0.0,-math.radians(VPC.pitchAngleLimit),math.radians(VPC.pitchAngleLimit))
        return
    
    def getTrimInputs(self):
        return self.TI

    def setTrimInputs(self, TI=Inputs.controlInputs(Throttle=0.5, Aileron=0.0, Elevator=0.0, Rudder=0.0)):
        self.TI = TI
        return

    def setVehicleState(self, state): 
        self.VAM.vehicleDynamics.state = state  
        return
    
